"""
Django settings for insights project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import json
import os
from pathlib import Path

import environ
import sentry_sdk
from django.utils.log import DEFAULT_LOGGING
from sentry_sdk.integrations.django import DjangoIntegration

environ.Env.read_env(env_file=(environ.Path(__file__) - 2)(".env"))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])

AUTH_USER_MODEL = "users.User"

ADMIN_ENABLED = env.bool("ADMIN_ENABLED", default=True)

INSIGHTS_DOMAIN = env.str("INSIGHTS_DOMAIN", default="localhost")

# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Local apps
    "insights.event_driven",
    "insights.shared",
    "insights.dashboards",
    "insights.projects",
    "insights.sources",
    "insights.users",
    "insights.widgets",
    "insights.metrics",
    "insights.metrics.vtex",
    "insights.metrics.skills",
    "insights.metrics.meta",
    "insights.metrics.conversations",
    "insights.reports",
    "insights.core",
    # 3rd party apps
    "django_filters",
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "drf_spectacular",
]

if ADMIN_ENABLED is True:
    INSTALLED_APPS.append("django.contrib.admin")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "insights.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "insights.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": env.db(var="DEFAULT_DATABASE", default="sqlite:///insights_db.sqlite3"),
    "chats": env.db(var="CHATS_PG_DATABASE", default="sqlite:///chats_db.sqlite3"),
    "flows": env.db(var="FLOWS_PG_DATABASE", default="sqlite:///flows_db.sqlite3"),
}
PSYCOPG_DATABASES = {
    "flows": env.str(var="FLOWS_PG_DATABASE", default="sqlite:///flows_db.sqlite3"),
}

FLOWS_ES_DATABASE = env.str(var="FLOWS_ES_DATABASE", default="https://localhost:9000")

WENI_DASHBOARD = env.str("WENI_DASHBOARD", default="")
FLOWS_URL = env.str("FLOWS_URL", default="")

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

DEFAULT_LANGUAGE = "en-us"
LOCALE_PATHS = [os.path.join(BASE_DIR, "insights/locale")]

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication"
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination." + "LimitOffsetPagination",
    "PAGE_SIZE": env.int("REST_PAGINATION_SIZE", default=20),
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Insights Engine",
    "DESCRIPTION": "Insights REST API",
    "VERSION": "0.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    # OTHER SETTINGS
}

# Logging

LOGGING = DEFAULT_LOGGING
LOGGING["formatters"]["verbose"] = {
    "format": "%(levelname)s  %(asctime)s  %(module)s "
    "%(process)d  %(thread)d  %(message)s"
}
LOGGING["handlers"]["console"] = {
    "level": "DEBUG",
    "class": "logging.StreamHandler",
    "formatter": "verbose",
}

# mozilla-django-oidc

OIDC_ENABLED = env.bool("OIDC_ENABLED", default=False)
if OIDC_ENABLED:
    REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES"].append(
        "insights.authentication.authentication.WeniOIDCAuthentication"
    )
    INSTALLED_APPS = (*INSTALLED_APPS, "mozilla_django_oidc")
    LOGGING["loggers"]["mozilla_django_oidc"] = {
        "level": "DEBUG",
        "handlers": ["console"],
        "propagate": False,
    }
    LOGGING["loggers"]["weni_django_oidc"] = {
        "level": "DEBUG",
        "handlers": ["console"],
        "propagate": False,
    }

    OIDC_RP_CLIENT_ID = env.str("OIDC_RP_CLIENT_ID")
    OIDC_RP_CLIENT_SECRET = env.str("OIDC_RP_CLIENT_SECRET")
    OIDC_OP_AUTHORIZATION_ENDPOINT = env.str("OIDC_OP_AUTHORIZATION_ENDPOINT")
    OIDC_OP_TOKEN_ENDPOINT = env.str("OIDC_OP_TOKEN_ENDPOINT")
    OIDC_OP_USER_ENDPOINT = env.str("OIDC_OP_USER_ENDPOINT")
    OIDC_OP_USERS_DATA_ENDPOINT = env.str("OIDC_OP_USERS_DATA_ENDPOINT")
    OIDC_OP_JWKS_ENDPOINT = env.str("OIDC_OP_JWKS_ENDPOINT")
    OIDC_RP_SIGN_ALGO = env.str("OIDC_RP_SIGN_ALGO", default="RS256")
    OIDC_DRF_AUTH_BACKEND = env.str(
        "OIDC_DRF_AUTH_BACKEND",
        default="insights.authentication.authentication.WeniOIDCAuthenticationBackend",
    )

    OIDC_RP_SCOPES = env.str("OIDC_RP_SCOPES", default="openid email")

    # TODO: Set admin permission to Chats client and remove the follow variables
    OIDC_ADMIN_CLIENT_ID = env.str("OIDC_ADMIN_CLIENT_ID")
    OIDC_ADMIN_CLIENT_SECRET = env.str("OIDC_ADMIN_CLIENT_SECRET")

OIDC_CACHE_TOKEN = env.bool(
    "OIDC_CACHE_TOKEN", default=False
)  # Enable/disable user token caching (default: False).
OIDC_CACHE_TTL = env.int(
    "OIDC_CACHE_TTL", default=600
)  # Time-to-live for cached user tokens (default: 600 seconds).

# CORS CONFIG
CORS_ORIGIN_ALLOW_ALL = True

# Sentry configuration

USE_SENTRY = env.bool("USE_SENTRY", default=False)

if USE_SENTRY:
    sentry_sdk.init(
        dsn=env.str("SENTRY_DSN"),
        integrations=[DjangoIntegration()],
        environment=env.str("ENVIRONMENT", default="develop"),
    )

USE_EDA = env.bool("USE_EDA", default=False)

if USE_EDA:
    EDA_CONNECTION_BACKEND = "insights.event_driven.backends.PyAMQPConnectionBackend"
    EDA_CONSUMERS_HANDLE = "insights.event_driven.handle.handle_consumers"

    EDA_BROKER_HOST = env("EDA_BROKER_HOST", default="localhost")
    EDA_VIRTUAL_HOST = env("EDA_VIRTUAL_HOST", default="/")
    EDA_BROKER_PORT = env.int("EDA_BROKER_PORT", default=5672)
    EDA_BROKER_USER = env("EDA_BROKER_USER", default="guest")
    EDA_BROKER_PASSWORD = env("EDA_BROKER_PASSWORD", default="guest")
    EDA_WAIT_TIME_RETRY = env.int("EDA_WAIT_TIME_RETRY", default=5)

    FLOWS_TICKETER_EXCHANGE = env("FLOWS_TICKETER_EXCHANGE", default="sectors.topic")
    FLOWS_QUEUE_EXCHANGE = env("FLOWS_QUEUE_EXCHANGE", default="queues.topic")

CHATS_URL = env("CHATS_URL", default="")

PROJECT_ALLOW_LIST = env("PROJECT_ALLOW_LIST", default=[])

GROQ_OPEN_AI_URL = env.str("GROQ_OPEN_AI_URL", default="")
GROQ_CHATGPT_TOKEN = env.str("GROQ_CHATGPT_TOKEN", default="")
GROQ_OPEN_AI_GPT_VERSION = env.str("GROQ_OPEN_AI_GPT_VERSION", default="")

INTEGRATIONS_URL = env("INTEGRATIONS_URL", default="")

REDIS_URL = env.str("CHANNEL_LAYERS_REDIS", default="redis://localhost:6379/1")
STATIC_API_TOKEN = env.str("STATIC_API_TOKEN", default="")
# channels
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.pubsub.RedisPubSubChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    }
}

# Celery configuration
CELERY_BROKER_URL = env.str("CELERY_BROKER_URL", default=REDIS_URL)
CELERY_RESULT_BACKEND = env.str("CELERY_RESULT_BACKEND", default=REDIS_URL)
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BEAT_SCHEDULER = "celery.beat:PersistentScheduler"
CELERY_BEAT_MAX_LOOP_INTERVAL = 10

PROJECTS_VTEX = json.loads(os.getenv("PROJECTS_VTEX", "[]"))
PROJECT_TOKENS_VTEX = json.loads(os.getenv("PROJECT_TOKENS_VTEX", "{}"))

WHATSAPP_API_ACCESS_TOKEN = env.str("WHATSAPP_API_ACCESS_TOKEN", default="")

# TEMPORARY, this should be used only in the development and staging environments
WHATSAPP_ABANDONED_CART_TEMPLATE_ID = env.str(
    "WHATSAPP_ABANDONED_CART_TEMPLATE_ID", default=""
)
WHATSAPP_ABANDONED_CART_WABA_ID = env.str("WHATSAPP_ABANDONED_CART_WABA_ID", default="")
VTEX_ORDERS_CREDENTIALS = env.str("VTEX_ORDERS_CREDENTIALS", default="")
WHATSAPP_ABANDONED_CART_UTM_SOURCE = env.str(
    "WHATSAPP_ABANDONED_CART_UTM_SOURCE", default=""
)

# Temporary: just for testing purposes
TEMP_TEST_TEMPLATES_DASH_PROJECT_UUID = env.str(
    "TEMP_TEST_TEMPLATES_DASH_PROJECT_UUID", default=""
)
PROJECT_WABAS_MOCK = env.str("PROJECT_WABAS_MOCK", default="")
WEBHOOK_URL = env.str(
    "WEBHOOK_URL", default="https://webhook.weni.ai/webhook/project/update"
)
STATIC_TOKEN = env.str("STATIC_TOKEN", default="")


CACHE_DATALAKE_EVENTS_RESULTS = env.bool("CACHE_DATALAKE_EVENTS_RESULTS", default=True)
CACHE_DATALAKE_EVENTS_RESULTS_TTL = env.int(
    "CACHE_DATALAKE_EVENTS_RESULTS_TTL", default=60 * 60
)
NEXUS_BASE_URL = env.str("NEXUS_BASE_URL", default="")
NEXUS_API_TOKEN = env.str("NEXUS_API_TOKEN", default="")
LIMIT_TOPICS_DISTRIBUTION_BY_NEXUS_TOPICS = env.bool(
    "LIMIT_TOPICS_DISTRIBUTION_BY_NEXUS_TOPICS", default=True
)

INDEXER_AUTOMATIC_ACTIVATION = env.bool("INDEXER_AUTOMATIC_ACTIVATION", default=False)
INDEXER_AUTOMATIC_ACTIVATION_LIMIT = env.int(
    "INDEXER_AUTOMATIC_ACTIVATION_LIMIT", default=5
)
INDEXER_AUTOMATIC_ACTIVATION_RETRIES = env.int(
    "INDEXER_AUTOMATIC_ACTIVATION_RETRIES", default=5
)

DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL", default="")

REPORT_GENERATION_MAX_CONCURRENT_REPORTS = env.int(
    "REPORT_GENERATION_MAX_CONCURRENT_REPORTS", default=1
)
REPORT_GENERATION_TIMEOUT = env.int(
    "REPORT_GENERATION_TIMEOUT", default=60 * 60
)  # 1 hour

SEND_EMAILS = env.bool("SEND_EMAILS", default=False)

if SEND_EMAILS:
    EMAIL_HOST = env.str("EMAIL_HOST", default=None)
    DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL")
    SERVER_EMAIL = env.str("SERVER_EMAIL")

    EMAIL_PORT = env.int("EMAIL_PORT")
    EMAIL_HOST_USER = env.str("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD")
    EMAIL_USE_SSL = env.bool("EMAIL_USE_SSL")
    EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS")

HOSTNAME = env.str("HOSTNAME", default="")

# Feature Flags (GrowthBook)
FEATURE_FLAGS_ENABLED = env.bool("FEATURE_FLAGS_ENABLED", default=False)
GROWTHBOOK_HOST_BASE_URL = env.str(
    "GROWTHBOOK_HOST_BASE_URL",
    default=env.str("GROWTHBOOK_API_HOST", default="https://cdn.growthbook.io"),
)
GROWTHBOOK_CLIENT_KEY = env.str("GROWTHBOOK_CLIENT_KEY", default="")
GROWTHBOOK_SHORT_CACHE_KEY = env.str(
    "GROWTHBOOK_SHORT_CACHE_KEY", default="growthbook:features:short"
)
GROWTHBOOK_SHORT_CACHE_TTL = env.int("GROWTHBOOK_SHORT_CACHE_TTL", default=300)
GROWTHBOOK_LONG_CACHE_KEY = env.str(
    "GROWTHBOOK_LONG_CACHE_KEY", default="growthbook:features:long"
)
GROWTHBOOK_LONG_CACHE_TTL = env.int(
    "GROWTHBOOK_LONG_CACHE_TTL", default=60 * 60 * 24 * 30
)
GROWTHBOOK_WEBHOOK_SECRET = env.str("GROWTHBOOK_WEBHOOK_SECRET", default="")

# Conversations Report
CONVERSATIONS_REPORT_FEATURE_FLAG_KEY = env.str(
    "CONVERSATIONS_REPORT_FEATURE_FLAG_KEY", default="insightsConversationsReport"
)


# Conversations dashboard

# This is useful for the staging and development environments
# that doesn't use the flowruns indexer
# but needs to create the conversations dashboard
# Should be set to True in production
CONVERSATIONS_DASHBOARD_REQUIRES_INDEXER_ACTIVATION = env.bool(
    "CONVERSATIONS_DASHBOARD_REQUIRES_INDEXER_ACTIVATION", default=False
)
CONVERSATIONS_DASHBOARD_EXCLUDE_FROM_LIST_IF_INDEXER_IS_NOT_ACTIVE = env.bool(
    "CONVERSATIONS_DASHBOARD_EXCLUDE_FROM_LIST_IF_INDEXER_IS_NOT_ACTIVE", default=False
)

# Staging Mock Dashboards
STG_MOCK_META_WABA_IDS = env.list("STG_MOCK_META_WABA_IDS", default=[])
STG_MOCK_CONVERSATIONS_PROJECT_UUIDS = env.list(
    "STG_MOCK_CONVERSATIONS_PROJECT_UUIDS", default=[]
)
STG_MOCK_CUSTOM_FLOWRUNS = env.list("STG_MOCK_CUSTOM_FLOWRUNS", default=[])
